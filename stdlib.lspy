;;;
;;; Lispy standard function
;;;


;Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

;;; Functional Functions

;Function definitions
(def {fun} (\ {f b}{
    def (head f) (\ (tail f) b)
}))

;Open a new scope
(fun{let b}{
    ((\ {_} b)())
})

;Unpack List for Function
(fun {unpack f l}{
    eval(join (list f ) l)
})

;Pack List for Function
(fun {pack f & xs} {f xs})

;Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

;Perform Several things in Sequence
(fun {do & l}{
    if(== l nil)
        {nil}
        {last l}
})

;;;Logical Function

;Logical functions 
(fun {not x} {-1 x})
(fun {or x y } {+ x y})
(fun {and x y} {* x y})

;;; Numeric Function

;Minimum of Argument
(fun {min & xs} {
    if(==(tail xs ) nil ){ fst xs}
    {do
    (= {rest} (unpack min (tail xs)))
    (= {item} (fst xs))
    (if (< item rest) {item} {rest})
    }
})

;Maximum of Argument
(fun {max & xs} {
    if(== (tail xs) nil) {fst xs}
    {do
    (= {rest} (unpack max (tail xs)))
    (= {item} (fst xs))
    (if(> item rest) {item} {rest})
    }
})

;;;Conditional Functions
(fun {select & cs} {
    if(== cs nil)
        {error "No selection Found"}
        {if (fst (fst cs)) {sec (fst cs)} {unpack select (tail cs)}}
})

(fun {case x & cs}{
    if(== cs nil)
        {error "No Case Found"}
        {if (== x (fst (fst cs))) {sec (cs)}{
            unpack case (join (list x) (tail cs))
        }}
})
;Default Case
(def {otherwise} true)

;;;Extras 
(fun {rev f a b} {f b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

; First Second and Third item in List
(fun {fst l} {eval (head l) })
(fun {sec l} {eval (head (tail l)) })
(fun {thr l} {eval (head (tail (tail l))) })

;List Length
(fun {len l} {
    if(== l nil)
        {0}
        {+ 1 (len (tail l))}
})
;Nth item in List 
(fun {nth n l}{
    if(== n 0)
        {fst l}
        {nth (- n 1 ) (tail l)}
})

; Apply Functions to list
(fun {map f l} {
    if(== l nil)
        {nil}
        {join (list (f (fst l))) (map f (tail l))}
})

; Apply Filter to list 
(fun { filter f l} {
    if (== l nil)
        {nil}
        {join (if (f (fst l)) {head l} {nil}) (filter f(tail l))}
})

;Return all of list but last Element
(fun {init l} {
    if(== (tail l) nil)
        {nil}
        {join (head l) (init (tail l))}
})

;Reverse List
(fun {reverse l}{
    if(==l nil)
        {nil}
        {join (reverse (tail l)) (head l)}
})

;Fold or accumulates the data of entire list into a single var
; Fold left
(fun {foldl f z l} {
    if (== l nil)
        {z}
        {foldl f (f z (fst l)) (tail l)}
})

;Fold right
(fun {foldr f z l} {
    if(== l nil)
        {z}
        {f (fst l) (foldr f z (tail l))}
})


(fun {sum l} {foldl + 0 l})
(fun {product l} {foldl * 1 l})

;Last item in list 
(fun {last l} {nth (-(len l ) 1) l})

;Take N items 
(fun {take n l}{
    if(== n 0)
        {nil}
        {join (head l) (take (- n 1) (tail l))}
})

;Drop N items
(fun {drop n l} {
    if(== n 0)
        {l}
        {drop (- n 1) (tail l)}
})

;Split at N
(fun {split n l} {list (take n l) (drop n l)})

;Element of List
(fun {elem x l} {
    if(== l nil)
        {false}
        {if (== x (fst l)) {true} {elem x (tail l)}}
})

;Take while
(fun {take-while f l}{
    if(not (unpack f (head l)))
        {nil}
        {join (head l) (take-while f (tail l))}
})

;Drop while
(fun {drop-while f l}{
    if(not (unpack f (head l)))
        {l}
        {drop-while f (tail l)}
})

;Element of list
(fun {elem x l}{
    if(== l nil)
        {false}
        {if (== x (fst l)) {true} {elem x {tail l}}}

})

;;Find element in list of pair
(fun {lookup x l}{
    if(== l nil)
        {error "No Element Found"}
        {do
          (={key} (fst(fst l)))
          (= {val} (sec (fst l)))
          (if (== key x) {val} {lookup x (tail l)})
        }
})

;Zip Two lists together into a list of pairs
(fun {zip x y}{
    if(or (== x nil) (== y nil))
        {nil}
        {join (list (join (head x) (head y))) (zip (tail x) (tail y))}
})

;Unzip a list of pair into two lists
(fun {unzip l} {
    if(== l nil)
        {{nil nil}}
        {do
          (= {x} (fst l))
          (= {xs} (unzip (tail l)))
          (list (join (head x) (fst xs)) (join (tail x) (sec xs)))
        }
})

;Print Day of month suffix
(fun {month-day-suffix i} {
    select 
        {(== i 0) "st"}
        {(== i 1) "nd"}
        {(== i 2) "rd"}
        {otherwise "th"}
})

; for day and name of weekdays
(fun {day-name x}{
    case x
        {0 "Monday"}
        {1 "Tuesday"}
        {2 "Wednesday"}
        {3 "Thrusday"}
        {4 "Friday"}
        {5 "Saturday"}
        {6 "Sunday"}
})

;Fibonacci
(fun {fib n}{
    select 
        { (==n 0) {0} }
        { (==n 1) {1} }
        { otherwise {+ (fib (- n 1)) (fib (- n 2))}}
})